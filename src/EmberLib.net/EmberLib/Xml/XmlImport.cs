/*
   EmberLib.net -- .NET implementation of the Ember+ Protocol

   Copyright (C) 2012-2019 Lawo GmbH (http://www.lawo.com).
   Distributed under the Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
*/
// XXX: Changes has been made, BerType.Null, NullEmberLeaf added
using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Diagnostics;
using System.Globalization;
using BerLib;

namespace EmberLib.Xml
{
   /// <summary>
   /// Converts XML data previously generated by EmberLib.Xml.XmlExport to an Ember DOM tree.
   /// </summary>
   public class XmlImport
   {
      /// <summary>
      /// Converts XML previously generated by XmlExport.Export to an Ember tree.
      /// </summary>
      /// <param name="reader">XmlReader pointing to the data to import.</param>
      /// <param name="application">Application interface used to create nodes with
      /// application-defined types.</param>
      /// <returns>The root of the imported ember tree.</returns>
      public static EmberNode Import(XmlReader reader, EmberApplicationInterface application)
      {
         var import = new XmlImport(reader, application);

         return import.Convert();
      }

      #region Implementation
      XmlReader _reader;
      EmberApplicationInterface _application;

      XmlImport(XmlReader reader, EmberApplicationInterface application)
      {
         _reader = reader;
         _application = application;
      }

      EmberNode Convert()
      {
         if(_reader.IsStartElement())
            return Convert_Recurse(null);

         return null;
      }

      EmberNode Convert_Recurse(EmberNode parent)
      {
         var tagName = _reader.Name;
         var isEmpty = _reader.IsEmptyElement;
         var typeName = _reader["type"];

         _reader.ReadStartElement();

         var node = CreateNode(tagName, typeName);

         if(node != null)
         {
            if(node is EmberContainer)
            {
               while(_reader.IsStartElement())
                  Convert_Recurse(node);
            }

            if(parent != null)
               parent.InsertChildNode(node);
         }

         if(isEmpty == false)
            _reader.ReadEndElement();

         return node;
      }

      EmberNode CreateNode(string tagName, string typeName)
      {
         BerTag tag;
         EmberNode node = null;

         if(BerTag.TryParse(tagName, out tag) && typeName != null)
         {
            uint type;

            if(BerDefinitions.GetTypeFromName(typeName, true, out type))
            {
               switch(type)
               {
                  case BerType.Null:
                  {
                     node = new NullEmberLeaf(tag);
                     break;
                  }
                  case BerType.Boolean:
                  {
                     bool value;

                     if(bool.TryParse(_reader.ReadContentAsString(), out value))
                        node = new BooleanEmberLeaf(tag, value);

                     break;
                  }

                  case BerType.Integer:
                  {
                     long value;

                     if(long.TryParse(_reader.ReadContentAsString(), out value))
                     {
                        if((ulong)value > int.MaxValue)
                           node = new LongEmberLeaf(tag, value);
                        else
                           node = new IntegerEmberLeaf(tag, (int)value);
                     }

                     break;
                  }

                  case BerType.Real:
                  {
                     double value;

                     if(double.TryParse(_reader.ReadContentAsString(), NumberStyles.Float, XmlExport.FormatProvider, out value))
                        node = new RealEmberLeaf(tag, value);

                     break;
                  }

                  case BerType.UTF8String:
                  {
                     node = new StringEmberLeaf(tag, _reader.ReadContentAsString());
                     break;
                  }

                  case BerType.OctetString:
                  {
                     var octets = System.Convert.FromBase64String(_reader.ReadContentAsString());
                     node = new OctetStringEmberLeaf(tag, octets);
                     break;
                  }

#pragma warning disable 618 // EmberFrame is obsolete
                  case BerType.Sequence:
                  {
                     if(tag == Legacy.EmberFrame.FrameTag)
                     {
                        Debug.WriteLine($"Warning: CreateNode / EmberFrame is obsolete");
                        node = new Legacy.EmberFrame();
                     }
                     else
                     {
                        node = new EmberSequence(tag, null);
                     }
                     break;
                  }
#pragma warning restore 618

                  case BerType.Set:
                  {
                     node = new EmberSet(tag);
                     break;
                  }

                  default:
                  {
                     if(_application != null)
                        node = _application.CreateNodeFromXml(type, tag, _reader);

                     if(node == null)
                     {
                        Debug.WriteLine($"Warning: Unknown BER value type: {type}");

                        node = new EmberContainer(tag, null, type);
                     }

                     break;
                  }
               }
            }
         }

         return node;
      }
      #endregion
   }
}
