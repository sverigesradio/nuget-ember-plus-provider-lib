#region copyright
/*
 * This code is from the Lawo/ember-plus GitHub repository and is licensed with
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
 #endregion

using System;
using System.Collections.Generic;
using System.Linq;

namespace EmberPlusProviderClassLib.Model
{
    public abstract class Element
    {
        protected Element(int number, Element parent, string identifier)
        {
            Parent = parent;
            Number = number;
            Identifier = identifier;

            parent?.AddChild(this);
        }

        public Element Parent { get; }
        public int Number { get; }
        public string Identifier { get; }
        public string SchemaIdentifier { get; set; }

        public virtual int ChildrenCount => 0;

        public virtual IEnumerable<Element> Children
        {
            get { yield break; }
        }

        public string Description { get; set; }

        public bool IsRoot => Parent == null;

        public string IdentifierPath
        {
            get
            {
                lock(_sync)
                {
                    if(_identifierPath == null)
                    {
                        var list = new LinkedList<string>();
                        list.AddFirst(Identifier);

                        var element = Parent;

                        while(element.IsRoot == false)
                        {
                            list.AddFirst(element.Identifier);
                            element = element.Parent;
                        }

                        _identifierPath = String.Join("/", list);
                    }
                }

                return _identifierPath;
            }
        }

        public int[] Path
        {
            get
            {
                lock(_sync)
                {
                    if (_path == null)
                    {
                        var path = new LinkedList<int>();
                        var elem = this;

                        while(elem.IsRoot == false)
                        {
                            path.AddFirst(elem.Number);
                            elem = elem.Parent;
                        }

                        _path = path.ToArray();
                    }
                }

                return _path;
            }
        }

        protected object SyncRoot => _sync;

        public virtual void AddChild(Element child)
        {
        }

        public virtual void RemoveChild(Element child)
        {
        }

        public Element ResolveChild(int[] path, out IDynamicPathHandler dynamicPathHandler)
        {
            var element = this;

            dynamicPathHandler = null;

            foreach(var number in path)
            {
                var child = (from elem in element.Children
                        where elem.Number == number
                        select elem)
                    .FirstOrDefault();
                
                if (child == null)
                {
                    if (element is IDynamicPathHandler)
                        dynamicPathHandler = (IDynamicPathHandler)element;

                    return null;
                }
                element = child;
            }

            return element;
        }

        public abstract TResult Accept<TState, TResult>(IElementVisitor<TState, TResult> visitor, TState state);

        string _identifierPath;
        int[] _path;
        readonly object _sync = new object();
    }
}