#region copyright
/*
 * This code is from the Lawo/ember-plus GitHub repository and is licensed with
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using EmberPlusProviderClassLib.Model;
using EmberPlusProviderClassLib.Model.Parameters;

namespace EmberPlusProviderClassLib.EmberHelpers
{
    public static class ElementExtensions
    {
        public static Element ResolveChild(this Element element, string identifierPath)
        {
            var pathArray = identifierPath.ToLower().Split('/');

            foreach (var pathPart in pathArray)
            {
                var child = (from elem in element.Children
                             where elem.Identifier.ToLower() == pathPart
                             select elem)
                             .FirstOrDefault();

                if (child == null)
                {
                    return null;
                }
                element = child;
            }

            return element;
        }

        public static IEnumerable<Node> ChildNodes(this Element node)
        {
            return node.Children.OfType<Node>();
        }

        public static Element GetChildElement(this Element node, string name)
        {
            name = (name ?? string.Empty).ToLower();
            return node.Children.FirstOrDefault(c => c.Identifier.ToLower() == name);
        }

        public static Node GetChildNode(this Element node, ValueType identifier)
        {
            return GetChildNode(node, identifier.ToString());
        }

        public static Node GetChildNode(this Element node, string name)
        {
            name = (name ?? string.Empty).ToLower();
            return node.Children.FirstOrDefault(c => c.Identifier.ToLower() == name) as Node;
        }

        public static IEnumerable<Element> GetChildElements(this Element node, string name)
        {
            name = (name ?? string.Empty).ToLower();
            return node.Children.Where(c => c.Identifier.ToLower() == name);
        }

        public static IEnumerable<Node> GetChildNodes(this Element node, string name)
        {
            name = (name ?? string.Empty).ToLower();
            return node.Children.Where(c => c.Identifier.ToLower() == name) as IEnumerable<Node>;
        }

        public static IEnumerable<ParameterBase> GetAllChildParameters(this Element element)
        {
            // Return all parameters
            var parameters = element.Children.Where(child => child is ParameterBase).OfType<ParameterBase>();
            foreach (var parameter in parameters)
            {
                yield return parameter;
            }

            // Also return all the child parameters, recursive
            foreach (var childParameter in element.Children.SelectMany(GetAllChildParameters))
            {
                yield return childParameter;
            }
        }

        public static IEnumerable<Matrix> GetAllChildMatrices(this Element element)
        {
            // Return all parameters
            var matrices = element.Children.Where(child => child is Matrix).OfType<Matrix>();
            foreach (var matrix in matrices)
            {
                yield return matrix;
            }

            // Also return all the child matrices, recursive
            foreach (var childMatrix in element.Children.SelectMany(GetAllChildMatrices))
            {
                yield return childMatrix;
            }
        }

        public static IEnumerable<ParameterBase> GetWritableChildParameters(this Element element)
        {
            // Return all writable parameters
            var parameters = element.Children.Where(child => child is ParameterBase && ((ParameterBase)child).IsWritable).OfType<ParameterBase>();
            foreach (var parameter in parameters)
            {
                yield return parameter;
            }

            // Also return all the writable child parameters, recursive
            foreach (var childParameter in element.Children.SelectMany(GetWritableChildParameters))
            {
                yield return childParameter;
            }
        }

        public static Node ParentNode(this Element element)
        {
            return element.Parent as Node;
        }

        public static string ToString(this Element element)
        {
            return $"{element.GetType().Name} {element.IdentifierPath}";
        }
    }
}